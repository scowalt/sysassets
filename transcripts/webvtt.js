var fs = require("fs")

var videoCaptions =[
  // Video 1
  [{"text":"Okay welcome to systems programming","width":200},{"text":"so let's get started","width":51},{"text":"let's write our first c program","width":103},{"text":"that makes use of a system call","width":144},{"text":"i'll do an example and then I'll let you play as well","width":219},{"text":"so uh here's a little virtual machine","width":146},{"text":"i've got up and running","width":122},{"text":"and i can write a little c file here","width":158},{"text":"so what we're going to do is make use of a system call called write","width":306},{"text":"so let's try this","width":52},{"text":"we'll say okay write","width":102},{"text":"and then i need to give it a file descriptor","width":213},{"text":"more about that in a moment","width":84},{"text":"a little message like hello","width":201},{"text":"and then the number of characters or bytes that i actually want to send here","width":267},{"text":"so h e l l o","width":179},{"text":"that's five bytes we're going to send","width":238},{"text":"so let's try compiling this","width":203},{"text":"and once that's going we'll see that whoops","width":233},{"text":"we've got a little bit of a problem here","width":118},{"text":"that write was not declared before","width":248},{"text":"okay so the c compiler here is warning us that we're trying to call a function called write which hasn't yet been declared","width":538},{"text":"so we could declare it","width":109},{"text":"now i happen to know for example that the write signature looks a little something like this","width":261},{"text":"it takes um, it's called write ","width":200},{"text":"it takes a file descriptor which is going to be an integer","width":161},{"text":"it takes a pointer to a character","width":183},{"text":"and it takes another integer which is the number of characters to write","width":273},{"text":"so it looks a little bit like that","width":97},{"text":"in fact it takes a void pointer which means point to it without any particular type","width":600},{"text":"so i could attempt to compile this for example","width":220},{"text":"see if this works","width":152},{"text":"and oh ho ho","width":34},{"text":"if we look at the left hand side","width":80},{"text":"we can see we managed to compile a program called program here","width":252},{"text":"and when we ran it we got hello","width":102},{"text":"alright so let's do a little better then that though","width":240},{"text":"rather than me having to manually write the declaration in here","width":313},{"text":"these are already included inside an existing file which I get for free","width":326},{"text":"it's actually unistd.h","width":229},{"text":"okay so let's tell the preprocessor to read in the contents of the file","width":251},{"text":"go in and find a file named unistd.h","width":179},{"text":"and include all the text that is in that file","width":179},{"text":"okay so now when we run this","width":193},{"text":"we'll compile it and run it and great it prints out hello","width":167},{"text":"if i wanted to print out hello with a new line","width":194},{"text":"let's increment this to six","width":154},{"text":"and now i've got a program called Hello","width":166},{"text":"okay great and of course i could make my program print out hello world and do it on two different lines","width":752},{"text":"alright so uh that's my program working","width":171},{"text":"now it's time for you to play","width":120},{"text":"you create which uses a system call write","width":237},{"text":"to write a little message on the two lines","width":219},{"text":"see you in the next video after you've said hello to the world","width":255},{"text":"bye","width":133}],
  // Video 2
  [{"text":"so let's talk more about that file descriptor","width":185},{"text":"I'm gonna make my program be a little bit more useful by printing out \"Hello World\" a few times","width":325},{"text":"so for example, I have a variable 'count' here and a little for-loop","width":335},{"text":"Start with count equal to five, while count is greater than zero","width":275},{"text":"each time around the loop we're going to decrement 'count'","width":270},{"text":"In C, there is no boolean type.","width":183},{"text":"instead, if I've got an integer value which is nonzero, that is treated as a true value","width":385},{"text":"So, I could actually write this more tersely just by saying \"hey, count!\"","width":323},{"text":"meaning is count a non-zero value","width":193},{"text":"and if you compare two things, you'll learn that with an integer value of either 0 or 1 to mean for example if they are either the same or different","width":497},{"text":"so, we're going to print out \"hello world\" 5 times","width":442},{"text":"I want to show you just a little idea here that actually I've got two file descriptors which are valid when my program starts.","width":519},{"text":"And they're called 1 and 2.","width":174},{"text":"Why might it be useful to have two output streams?","width":236},{"text":"well, you can imagine we have a program that is calculating something","width":266},{"text":"for example it's thinking of something to say or it's going to write to a file","width":282},{"text":"but we may also want to display some error messages back to the user","width":190},{"text":"or we might want to print some progress information","width":360},{"text":"the first output stream identified by the number '1' is the regular output, standard output","width":456},{"text":"The second one is reserved for error messages.","width":354},{"text":"Let's, for example, use this. Instead of error messages, we'll put a little dot to see this","width":419},{"text":"We'll run this and we should (if we got everything correct) see \"Hello\" and...lib lib lib lib","width":771},{"text":"Now, why do we see \".lib\", because we said \"hey, I'm going to give you a pointer and I want you to use that pointer and take the next 6 bytes from it which is the next  six character","width":886},{"text":"So we just got whatever happened to be in memory after our dot. So, we only wanted to do the dot","width":646},{"text":"Change that and run it again","width":195},{"text":"And great, we've got Hello and dot Hello dot Hello","width":195},{"text":"So, right now, both the output and the standard error are going to different places","width":352},{"text":"we could actually change that over here in the console before we start the program","width":277},{"text":"Our terminal can actually control where the output goes","width":256},{"text":"So, for example, I might say, I want to take the standard output and put that into a file.","width":344},{"text":"So, \"output.txt\"","width":153},{"text":"So now, if I run this before the program starts, I'm going to redirect it's output into this new file","width":531},{"text":"Okay, so what we see on the console output is anything written to standard error","width":308},{"text":"The standard output is inside output.txt","width":196},{"text":"To prove it, let me have a look at that file.","width":205},{"text":"Let me cat that file","width":94},{"text":"So, output.txt","width":145},{"text":"And here it is! It says \"hello, hello, hello, hello\"","width":239},{"text":"Now, rather than writing 1 and 2 over here, perhaps we should actually have some constants","width":359},{"text":"which signify what those values actually mean","width":238},{"text":"so we could say start define things to say have a constant here, I'll call it say \"STDOUT_FILENO 1\"","width":707},{"text":"And I'll say define STDERRFILENO 2","width":480},{"text":"so anytime you do hash define, you're talking to the preprocessor to say \"hey, in the future, parts of this file, if you come across this character sequence, then replace it (in this case) with either a 1 or a 2 depending on what it is\"","width":1084},{"text":"We can compile this, except I've got a surprise for you which is that these particular macros are already defined inside unistd.h","width":705},{"text":"So, I don't actually need to define them here in my program.","width":302},{"text":"So that's my little program. You see it's got a return value of zero. Which is a convention for being correct (no errors)","width":636},{"text":"But it's up to us. We could choose a different value, for example we could choose the value 42.","width":555},{"text":"And, I don't see an output value, but I can find out what the last exit value was of the last process","width":569},{"text":"Let me print it out","width":133},{"text":"It happens to beinside special variables","width":140},{"text":"so I could say \"Hello terminal value of this dollar question mark.\"","width":308},{"text":"which means give me the exit value (or the exit status) of the last command run.","width":347},{"text":"So there's our forty-two.","width":153},{"text":"Okay so, we've covered quite a bit of ground. We've talked about how in C, any non-zero integer is considered \"true\"","width":804},{"text":"and zero is considered \"false\"","width":235},{"text":"And, we've talked about these two different output streams. Now it's your turn to play with this. After that, let's have a go at creating some new files directly from C","width":831},{"text":"by making system calls","width":160},{"text":"So, now it's your turn. Have fun playing! Bye.","width":300}],
  // Video 3
  [{"text":"Welcome so let's start creating some files","width":334},{"text":"for that we can use the system call open()","width":194},{"text":"and for open we need to say whether we want to append to an existing file, create a brand new file, and we need to give it a filename","width":683},{"text":"For example, I might have a file name called \"output.txt\"","width":396},{"text":"so the open call takes 2 or 3 arguments. the second argument will be exactly what we want to do","width":557},{"text":"so in this case we want to say create a brand new file and truncate it back to 0 if it doesn't exist","width":469},{"text":"so, I want to truncate as well","width":237},{"text":"if we are creating a new file we better say who can read this file and who can write to this file and who can execute this file","width":533},{"text":"so we are going to have to say something about the mode flags ","width":346},{"text":"who is allowed to do what","width":89},{"text":"finally this call is going to give us back an integer, a file descriptor","width":272},{"text":"just like we've seen so far with file number 1 and file number 2","width":211},{"text":"so lets store that inside a little variable","width":219},{"text":"ok, so now I better actually find out what the correct syntax is","width":374},{"text":"and the correct arguments are in order to create a file","width":301},{"text":"so lets go and look that up","width":153},{"text":"and that we'll find inside the manual","width":187},{"text":"And, if, for example, I type \"man open\" on a command line on a real linux machine. it doesn't quite work yet in my small virtual one. we didn't have enough memory to include all the manual pages yet","width":887},{"text":"but heres a linux manual page I found on the web for the open()","width":342},{"text":"and you'll see here's the function signature here","width":301},{"text":"where we're going to pass in an integer for the flags and the mode type","width":297},{"text":"so, I'm going to look up now the flags I need to open and create a new file","width":463},{"text":"I don't want to do append()","width":106},{"text":"I want to use \"create\" and I want to truncate it as well","width":404},{"text":"let's include \"O_CREAT\" here. I'm going to say \"O_CREAT\" which is a constant and I'm going to bitwise OR it with the flag to say \"truncate\" so let's look that up as well","width":1309},{"text":"alright and i want to say when i open it that i am going to open it for say reading and writing","width":592},{"text":"so let us grab that as well","width":220},{"text":"so that is the first thing","width":160},{"text":"now we need to do the mode","width":109},{"text":"Let's write this as a variable.","width":134},{"text":"and there is actually a typedef","width":192},{"text":"it is essentially an integer but it is wrapped up in this type here called mode","width":520},{"text":"mode_t","width":79},{"text":"and we'll say that with our file we want to be fairly private and only the owner of the file can access it","width":594},{"text":"Let's go back up and find those flags, where are you? Here we go.","width":387},{"text":"We'll say that the user has read and write permission","width":343},{"text":"We'll copy the read one and we'll have write permission as well.","width":839},{"text":"But no one else in my linux system will be allowed to read it and write it.","width":476},{"text":"So that's the permissions we want","width":216},{"text":"What can we do with this?","width":82},{"text":"Well let's write something out to this file.","width":473},{"text":"We will write a little message \"Great!\" and a newline","width":506},{"text":"so how many characters is that? I've got \"one, two, three, four, five, six, and a new line so that's seven characters\"","width":612},{"text":"then we'll close this file descriptor meaning we don't want to use this descriptor anymore","width":436},{"text":"that will ensure as well that all of the bytes that we send to the file stream have been saved","width":621},{"text":"We're not doing any error checking right now, we're just trying to write the smallest possible program to create a file and send something to it","width":563},{"text":"let's run this and see what we get","width":239},{"text":"we'll run into an error which is: we haven't defined what this mode_t is","width":370},{"text":"what we forgot to do, was to do the includes","width":149},{"text":"the good news is that the man pages tell us which includes we need to put at the top of our program","width":637},{"text":"so let's grab those and insert them in here","width":285},{"text":"i will just get the formatting correct","width":279},{"text":"and, run it again","width":410},{"text":"Right so our program ran and it's still printing \"Hello\" to standard out and dot to standard error","width":418},{"text":"but hopefully, it also secretly created another file","width":215},{"text":"let's have a look at that file","width":136},{"text":"I can do \"ls\" and see if anything exists starting with \"out\"","width":493},{"text":"yes we've got output.txt. great!","width":140},{"text":"let's look at the contents of that file","width":154},{"text":"and it says \"Great!\" Fantastic","width":102},{"text":"Right so now it's your turn to play: create a file and see if you can send some bytes to that file.","width":518},{"text":"so you'll be using open(), write(), and close(). Bye.","width":296}],
  // Video 4
  [{"text":"Hello, suppose we want to actually print out some integer values","width":312},{"text":"write() doesn't give us that fuctionality","width":206},{"text":"write() is the low level call that we make to the operating system","width":252},{"text":"to say \"look, here's a pointer to some memory and please take so many bytes from that memory and send it out to a file\"","width":527},{"text":"or, possibly, another device","width":113},{"text":"if we want to change a bit pattern into a sequence of characters because we want to read, say, one-seven for the value seventeen","width":533},{"text":"that's not something that the system does","width":118},{"text":"instead, we've got some C standard library calls that we can call","width":256},{"text":"that do this for us","width":144},{"text":"and they will wrap the call to write()","width":186},{"text":"so as an example, let's try printing something out","width":329},{"text":"we can say \"printf my value is\"","width":387},{"text":"and I can say \"%d\"","width":134},{"text":"this means that the next argument I give in printf() better be an integer value","width":444},{"text":"so the bit pattern we pass to printf() will be treated as an integer","width":294},{"text":"to be displayed","width":73},{"text":"so let's have a little variable called result","width":220},{"text":"and I can say result is sixty five","width":404},{"text":"if I attempt to run this, we're using printf(), we haven't declared it beforehand so we get a warning","width":490},{"text":"to say \"oh, you're just using it.\" and, what we should've done is actually declare the function signature of printf()","width":580},{"text":"and that I know from looking at the man pages","width":248},{"text":"is inside stdio.h","width":195},{"text":"if you're coming from a cpp background, there's no IO streams","width":234},{"text":"we dont have operator overloading. instead, let's use printf()","width":211},{"text":"so we've got \"my value is 65\"","width":153},{"text":"and, you'll see that actually this was printed out after the hello hello hello hello","width":572},{"text":"here's why: printf() has a buffer. the C libraries have a buffer","width":250},{"text":"so it's only going to call write() when that buffer is full","width":248},{"text":"or if we explicitly tell it to","width":103},{"text":"or if we finish a line","width":157},{"text":"so let's put a newline in here and run it again","width":280},{"text":"this time, we've compiled it, and we should see that \"my value is 65\" appear before my hellos","width":523},{"text":"so this time, because we sent a new line, printf() will be making that call to write()","width":443},{"text":"to send its buffer out to standard out","width":347},{"text":"so now we can actually print out the value of our file descriptor","width":318},{"text":"let's do that. after we've opened our file, I'll send \"fildes is\" and, we will print out fildes.","width":1358},{"text":"and, let's get rid of the first one","width":157},{"text":"and let's flush our little buffer by sending in a newline","width":409},{"text":"and we'll see that our value is three","width":363},{"text":"so, we've opened up a file descriptor who's value is three","width":206},{"text":"in fact, that is expected by specification because if we successfully open a file, we'll get back the lowest unused integer (the lowest unused file descriptor)","width":809},{"text":"as one and two are already being used, we get back three","width":215},{"text":"so just for fun, let's actually close one of the existing file descriptors before we do the open()","width":547},{"text":"so let's close standard error","width":235},{"text":"I'm sorry, we'll close standard out","width":252},{"text":"and, we won't close our own file descriptor until the very end of the program here","width":545},{"text":"so I'm going to move that line down to here","width":164},{"text":"great, so, let's run this","width":457},{"text":"so, what did we do? we opened a file descriptor and now if we look at the output of the program, you'll see we're only getting our dots printed out on standard error","width":720},{"text":"why is that?","width":63},{"text":"what happened to our standard output?","width":63},{"text":"well, we better check out file output.text","width":221},{"text":"and you'll see that everything printed to standard out has been sent to our file","width":435},{"text":"why? because when we called open(), it gave us back a file descriptor for stream number one. and, that is the. that is where all the standard output is going to go","width":895},{"text":"so, all future output is being sent to our file","width":250},{"text":"this is a neat way if you'd like to do logging","width":252},{"text":"and we've just changed our program so that all future output goes to output.text","width":459},{"text":"now what if we've got a problem with open() ?","width":199},{"text":"right now, our code doesn't check for any error","width":221},{"text":"and, a better program would actually check the return values of our different calls","width":369},{"text":"for example, it could be that open() could fail. suppose, for example, we gave it a bad file descriptor","width":675},{"text":"now so we can see what's going on, I'm not going to close standard out anymore.","width":316},{"text":"I'm just going to give it a bad file name","width":234},{"text":"now, our program compiles correctly of course","width":192},{"text":"but this time our file descriptor is negative one","width":211},{"text":"so, we should check that","width":215},{"text":"in fact, if we check the man page of open(), it's always a good idea to check the section called \"return value\"","width":475},{"text":"and you'll see, it's specified here that we'll get back a negative one if an error occurred","width":318},{"text":"so the last thing we'll do today is let's capture that and quit if we get a bad error","width":340},{"text":"so, if fildes equals negative one","width":227},{"text":"a common error is to write equals instead of double equals for comparison","width":371},{"text":"and we want to quit here","width":171},{"text":"so we'll leave our program, so let's exit with a value","width":238},{"text":"to say: \"hey, we couldn't carry on\"","width":250},{"text":"I could've returned zero but I wanted to show you an alternative way to quit a C program is to call exit","width":327},{"text":"and we'll print out an error","width":398},{"text":"so, something bad happened while calling open","width":228},{"text":"so, we'll use perror()","width":269},{"text":"let's run this","width":246},{"text":"and, I get some implicit problem here that we're calling exit(). I need to find the right #include to call for that.","width":734},{"text":"but, you'll see on the lefthand side that we've got open() failed, so that's the part of the error message that I supplied","width":487},{"text":"followed by a colon followed by no such file or directories","width":213},{"text":"so it's complaining that my file name is bad","width":292},{"text":"if I had included a dot here, this is also an invalid file name because a single dot corresponds to the current directory","width":542},{"text":"and, it's complaining that it can't open that because dot corresponds to a directory","width":414},{"text":"so now it's your turn to play. bye!","width":240}],
  // Video 5
  [{"text":"Hi, so C is designed to be a portable language in a sense that we could write a C compiler for many many different hardware architectures","width":542},{"text":"from small embedded machines to large mainframes","width":284},{"text":"so C does not specify a precise number of bits required for, say, and integer","width":394},{"text":"instead it specifies minimums that should be supported by the architecture","width":348},{"text":"let's have a look at that. let's see how we can find out how large or small of numbers we can store in different types","width":385},{"text":"and also how many bytes each different type is ","width":209},{"text":"and even further, what is a byte?","width":183},{"text":"so let's start with our integers","width":152},{"text":"I could say hello but what's the largest value I can store inside my integer type?","width":438},{"text":"fortunately, there's some macros, some constants, defined inside limits.h","width":677},{"text":"let's find out what these are","width":209},{"text":"the int min and max is going to be %d and %d and INT_MIN and INT_MAX","width":753},{"text":"so, we'll print that out. I'll get rid of my unnecessary variable here","width":240},{"text":"let's run that","width":91},{"text":"and we see that on this particular machine, that an integer can represent numbers from roughly minus 2 billion to plus 2 billion","width":649},{"text":"a very wide range of numbers","width":135},{"text":"C promises that we'll be able to store the numbers between minus 32768 and plus 32767","width":460},{"text":"in other words, an integer will be at least 16 bits","width":292},{"text":"what else do we have? how about a character?","width":180},{"text":"well, here's a surprising thing, a character is one byte","width":225},{"text":"so what do we mean by byte?","width":113},{"text":"surely we mean 8 bits? no.","width":224},{"text":"though we often say a byte means 8 bits in modern parlance, it doesn't have to be true","width":421},{"text":"and in fact, C is very careful to say that a byte does not mean 8 bits","width":294},{"text":"it means at least 8 bits","width":101},{"text":"our character, then, is at least 8 bits","width":184},{"text":"so why this distinction?","width":122},{"text":"well, in being portable, C needs to be able to read and write every bit inside memory and each bit inside each memory should only live inside one addressable memory location","width":875},{"text":"and, it could be that architecture have very different numbers of bits it can read or write","width":515},{"text":"for example, an early PDP machine had a 36 bit wide addressable memory","width":394},{"text":"so, C does not attempt to say it's going to be exactly 8 bits","width":396},{"text":"so how do we find out how many bits are actually in a character?","width":254},{"text":"well, again, the limits.h includes a useful constants here","width":404},{"text":"a character is %d bytes","width":197},{"text":"let's go and see what that is","width":114},{"text":"so CHAR_BITS","width":129},{"text":"and we'll print that out","width":471},{"text":"on this architecture, a character is 8 bits","width":181},{"text":"that's typical on modern machines","width":283},{"text":"so what if I wanted to know the actual number of bytes in different types?","width":247},{"text":"for that, we have something called sizeof","width":306},{"text":"we can give it a type and it will tell us how many bytes (or if you prefer, how many characters) are required to hold that particular kind","width":468},{"text":"so for example, let's find out how big an integer is on this machine","width":334},{"text":"perhaps you can guess the answer already","width":136},{"text":"so, sizeof int is %d and we'll have a newline as well","width":903},{"text":"is it any surprise that the size of an integer on this particular machine happens to be 4 bytes","width":354},{"text":"and that's not surprising because we need thirty two bits to represent all numbers between minus two billion and plus two billion","width":529},{"text":"there are other integer types you'll see things like short (which is generally shorter than an int), long (which is generally longer), long long (which is even longer, still)","width":843},{"text":"and compilers even occasionally provide their own custom types as well","width":257},{"text":"notice as well that these types are signed","width":422},{"text":"so we can represent negative numbers and plus numbers","width":176},{"text":"C also provides the idea of being able to say that we can have an unsigned version","width":450},{"text":"so, for example, I can have an unsigned int","width":255},{"text":"now there is no signed bit that is included in the bitwise representation","width":439},{"text":"so that's great if you wanted to represent all the numbers between zero and 4 billion on this particular machine","width":355},{"text":"the character type can actually be signed or unsigned","width":343},{"text":"depending on the particular implementation of the C language for this particular architecture","width":404},{"text":"so that's enough for now","width":142},{"text":"in the next video, we will talk about pointers","width":137},{"text":"now it's time for you to play and learn a little bit about the basic C primitives. Bye!","width":394}],
  // Video 6
  [{"text":"Now let's talk about pointers and arrays","width":224},{"text":"how might I make an array of integers?","width":179},{"text":"let's say I had some data and I did this","width":241},{"text":"well, on this particular architecture we just found out that an integer is four bytes","width":272},{"text":"so I've now got thirty two bytes of storage","width":226},{"text":"and in fact, it's going to be thirty two bytes on the stack","width":209},{"text":"so what do I have here?","width":120},{"text":"when I say data square brackets eight, I'm going to get back four times eight, thirty two bytes all together","width":456},{"text":"all contiguous in memory","width":117},{"text":"and in fact, data is going to point to  the very first four bytes","width":240},{"text":"so I've got four bytes and then four bytes and then four bytes and then four bytes and so on","width":364},{"text":"let's have a look at that","width":116},{"text":"so, if I say printf data is at and this time do %p, that means treat data as and print it out as an address","width":760},{"text":"so we'll print this out","width":538},{"text":"and we see we've got a value here in memory","width":253},{"text":"that data points to the very first element","width":191},{"text":"let's do something a little bit surprising here","width":133},{"text":"let's add one to data and print that out","width":257},{"text":"so, data plus one","width":161},{"text":"and we'll do data plus two","width":244},{"text":"and so on","width":626},{"text":"so, if we look over here at our output, we'll see that each time we add one, our address in hexadecimal is going up by four each time","width":563},{"text":"so we've got 9d40, 9d44, 9d48","width":323},{"text":"here's why","width":43},{"text":"when you add an integer to an address pointer","width":308},{"text":"C knows the type of that pointer","width":209},{"text":"so in this case, we're pointing at integers","width":135},{"text":"so each time we add one, we actually want to progress to the next integer stored in memory","width":306},{"text":"and as each integer takes four bytes, that's why our address is going up by four each time","width":483},{"text":"so how could I use this?","width":101},{"text":"well, one way is to use asterisk which means use the address so, for example, I can say data the parenthesis are not strictly necessary but we'll use them in a moment","width":941},{"text":"and let's say store the value a hundred in there","width":188},{"text":"what about if I wanted to store some value at the next entry?","width":383},{"text":"ok so, hundred, hundred one","width":123},{"text":"so now I've stored the value a hundred that integer pattern into the first four bytes","width":376},{"text":"and the integer pattern for a hundred and one in the next four bytes","width":358},{"text":"and I guess you could figure out what this would do as well","width":374},{"text":"the asterisks means use the pointer follow the pointer dereference the pointer","width":409},{"text":"in other word, we've got an expression which is a memory address, now I want to use it","width":291},{"text":"now I actually want to use that pattern that bitwise pattern to actually read or write some memory","width":469},{"text":"so that's what the asterisk does means actually okay it's time to go and talk to memory","width":288},{"text":"this is so useful with arrays","width":127},{"text":"there is an alternative syntax which is to use the square brackets","width":228},{"text":"so for example I could have written the following","width":300},{"text":"which means take my address pointer add two to it and use that address for the array","width":473},{"text":"so these last two lines are the same","width":133},{"text":"in fact, here's a little secret about C that I could actually swap these around","width":319},{"text":"so we could also write this in this slightly crazy way","width":418},{"text":"so this is crazy but actually two square bracket data would evaluate to the same thing","width":396},{"text":"so that's something to confuse your non-C friends with","width":377},{"text":"that's enough with me playing with integer pointers","width":272},{"text":"now, it's your turn. Bye!","width":188}],
  // Video 7
   [{"text":"so what about strings in c?","width":131},{"text":"what if I said","width":99},{"text":"\"hello\"","width":79},{"text":"how is this represented? well clearly it's made up of characters","width":214},{"text":"and I've got five characters to display","width":218},{"text":"h e l l o, but actually C strings contain an extra character at the end","width":325},{"text":"a zero value or null character to say \"hey this is the end of the string\"","width":383},{"text":"so this is going to take six bytes of storage","width":196},{"text":"let's see if we can prove that","width":106},{"text":"we'll say printf() and \"Size of hello is %d\"","width":420},{"text":"and we'll have a little expression here to say what is the sizeof() \"hello\"","width":658},{"text":"and we'll print it out and you see that size of hello is 6","width":477},{"text":"h e l l o that's five, plus an extra byte for the 0 to say that's the end","width":410},{"text":"so we can use sizeof() on constant strings","width":339},{"text":"we could also run through the string to actually find the 0 byte ourselves","width":408},{"text":"so let's do that","width":79},{"text":"let's have a pointer to a character","width":279},{"text":"I will initialize it to my string \"hello\"","width":347},{"text":"which means pointer is initially pointing to h the first character","width":448},{"text":"I'll have a little count variable here","width":161},{"text":"and let's say \"while the pointer the value is not equal to 0\"","width":676},{"text":"I want to do something","width":83},{"text":"lets increment the pointer","width":72},{"text":"lets move it onto the next character","width":115},{"text":"and let's increment our count as well","width":185},{"text":"so we can find out how many characters we have","width":261},{"text":"and then at the end we will say how many characters we found","width":461},{"text":"which are not the 0 byte","width":276},{"text":"so if our program works this should find five characters","width":324},{"text":"lets run it and i'll put in a new line at the end","width":707},{"text":"our little loop went around five times and all it did was increment count","width":302},{"text":"we could have made it of course print out each one of those letters","width":254},{"text":"we could also simplify our program a little bit","width":142},{"text":"because as you know any non-zero value is treated as true","width":342},{"text":"so let's remove that and say while star pointer","width":245},{"text":"and when we get to the null byte we will finish","width":197},{"text":"so just for fun lets change our program as well before we increment the pointer to print out the next characters","width":603},{"text":"my format string is just %c. and what character would I want? well the one pointed to by the pointer","width":493},{"text":"pointers to characters that  each character is exactly one byte","width":353},{"text":"so when we add one to our pointer, line ten here","width":266},{"text":"we are actually just going to add one to it","width":176},{"text":"because each character is exactly one byte","width":165},{"text":"so there's our program and it managed to print out exactly \"hello\"","width":538},{"text":"do we need to write this every time that we want to find out the number of characters in a string?","width":397},{"text":"no! guess what there's a function called strlen()","width":190},{"text":"so instead of my little loop if I include string.h","width":413},{"text":"I've now got strlen()","width":92},{"text":"so let me check the two results","width":212},{"text":"instead I'll say len is strlen() and pass it a pointer to my character","width":394},{"text":"I'm tempted to use pointer but that would be a bad idea","width":209},{"text":"perhaps you can figure out why","width":159},{"text":"so \"Strlen returned\" and we'll talk about how to fix my program in a moment","width":621},{"text":"so we'll run this","width":454},{"text":"strlen() returned 0","width":104},{"text":"why? because by the time my loop finished I'd advanced that pointer on until it had reached that null byte","width":395},{"text":"so when we passed that to strlen() it immediately found the null byte","width":209},{"text":"now what we should do is evaluate our strlen() before we change our pointer","width":962},{"text":"the last thing we'll do today is make our program crash","width":201},{"text":"let's try and change our first character to be someting else","width":396},{"text":"like 'J' turn it into Jello","width":283},{"text":"so let's dereference that pointer and use it to push in a character","width":397},{"text":"I don't want to have a string, i actually want to have a character","width":322},{"text":"let's try that and see what happens","width":296},{"text":"I get a segmentation fault when I try to run that line","width":189},{"text":"here's why, different parts of my proccesses' memory are valid for reading or reading and writing","width":549},{"text":"the program code, the actual assembly, the actual instructions for the cpu, can only be read","width":418},{"text":"and my constants, such as this \"hello\" can only be read","width":274},{"text":"and the hardware is sophisticated enough to know which parts of memory are read and which parts of memory are read/write","width":487},{"text":"and which parts of memory are invalid","width":147},{"text":"so that's why I get a segmentation fault if I try to change the constant memory","width":383},{"text":"alright time for you to play with character poitners, bye","width":270}],
  // Video 8
  [{"text":"So this video is about how to have an argument","width":174},{"text":"let's have a look inside some directories that we've got on our little system","width":281},{"text":"so if I type ls /bin","width":170},{"text":"you'll see here's a whole lot of programs that I can run from my terminal window","width":298},{"text":"and some of them you might recognize already","width":123},{"text":"including ls for list the contents of a directory (what we just did)","width":243},{"text":"cat to list the contents of a file and print it out","width":213},{"text":"and echo simply to echo back whatever we type","width":260},{"text":"so I can say echo Hello World","width":196},{"text":"and we also can used echo to print out the result of the exit value of the last program run","width":364},{"text":"how is it that these programs then can find out the parameters (the arguments) that we supply?","width":456},{"text":"when they are run?","width":90},{"text":"and the answer is that actually our main method can have two parameters here","width":339},{"text":"we have an integer (the number of arguments here) and also an array of character pointers","width":601},{"text":"called argv for value","width":206},{"text":"so let's actually print out some of these things","width":218},{"text":"so we'll say printf and we'll have the argv, the very first entry, the zero-th index is this","width":600},{"text":"and we'll say argv of zero","width":157},{"text":"and we will also print out what the last thing points to","width":384},{"text":"so that's going to be argc","width":190},{"text":"so that's %p","width":143},{"text":"we'll have a new line or two","width":135},{"text":"alright, and change that argc","width":311},{"text":"so here's two surprising things","width":176},{"text":"first of all, the very first entry is actually the execution name of the program","width":291},{"text":"how we started the program","width":150},{"text":"here, our program is just called \"program\"","width":298},{"text":"and secondly, there is actually one extra argument at the end and that points to the null string","width":417},{"text":"our pointer is null, it's zero","width":264},{"text":"so, let's now actually print out the other values","width":359},{"text":"we'll find out what the other values of argv is","width":628},{"text":"and we'll loop through and we'll print out all of those values","width":258},{"text":"so I'll have a little count. I'll start from 1 this time.","width":226},{"text":"because we don't want to print out the program name","width":343},{"text":"I can say: while count is less than argc, because I don't need the null pointer at the end","width":457},{"text":"and each time around the loop, increment count","width":274},{"text":"I'll print out the value of my count that's %d and print out its value as a string","width":565},{"text":"ok so that's going to be count and argv at index of count","width":442},{"text":"finally, let's put a new line in here","width":173},{"text":"here's my mistake: I should have said argc here for count","width":297},{"text":"ok, let's print it out","width":296},{"text":"when we start, argc is just 1. we've got just the program","width":197},{"text":"run it again but this time but this time have \"cat hat sat\"","width":277},{"text":"and you'll see I've got three additional arguments","width":254},{"text":"if I had put that inside double quotes then the hat and sat would be one argument","width":565},{"text":"so you see that we can now send our arguments","width":199},{"text":"for example, I could write a little program that helps me add up some numbers","width":370},{"text":"and I need a simple way to turn a string of digits into an integer","width":444},{"text":"in other words, I want to go from ASCII to an integer","width":136},{"text":"so this is the simplest way of turning a string into an integer number","width":466},{"text":"but this function doesn't give us much error checking","width":123},{"text":"if it can't read it, it simply returns zero","width":121},{"text":"I'll talk about how we can do a better job using scanf in a different lecture","width":238},{"text":"so we'll add those up and we'll print the result. right so we've got a result of zero","width":425},{"text":"let's try running our program again with 10 20 30","width":280},{"text":"and we see we get a result of 60","width":205},{"text":"if I had put some non-numbers in here, I get the result ten because the string I've got here it's converted into a zero","width":821},{"text":"alright, that's enough from me. now it's time for you to play. bye!","width":257}],
  // Video 9
  [{"text":"hi so this video is about the environment","width":260},{"text":"so in addition to being able to set arguments to our little programs","width":317},{"text":"each program also has access to environment variables","width":229},{"text":"let's have a look at those now","width":104},{"text":"so in my shell over here","width":149},{"text":"so my terminal window","width":63},{"text":"if i type for example set","width":117},{"text":"i can see a list of environment variables","width":181},{"text":"so these can be used by the shell and any other programs that we start to help configure their behavior","width":316},{"text":"for example we see down here that I am running as superuser","width":377},{"text":"as the root on this little system here","width":188},{"text":"we can also see that my home directory is in slash root","width":258},{"text":"so that's where kind of root's files will be stored","width":236},{"text":"great so how will i get access to that in my c programs","width":274},{"text":"well there's two ways","width":118},{"text":"first of all there's a variable called environ","width":301},{"text":"which if we are running in an older posix environment","width":280},{"text":"we have to specifically declare ","width":167},{"text":"in fact we say look there is somewhere in there is already a variable declared called environ and we just need access to it","width":475},{"text":"so that's what the extern keyword means","width":168},{"text":"we are not trying to say give me additional storage for this","width":149},{"text":"rather that the storage for this environment variable has already been made","width":210},{"text":"and we just want to be able to reference it inside our program","width":253},{"text":"so if i use that","width":173},{"text":"you'll see that it's actually a character pointer pointer","width":212},{"text":"in other words i'm going to dereference it twice","width":173},{"text":"the first time i dereference it","width":180},{"text":"i get a pointer and that pointer itself is going to point to character strings","width":297},{"text":"and i can keep moving along then to print out different environmental variables","width":342},{"text":"so if i had the same kind of pointer ","width":252},{"text":"i'll call it ptr and i initialize it to environ","width":341},{"text":"i could print out the very first one","width":234},{"text":"if i say let me print out a string and a new line and if I do star pointer we can follow that money if you like","width":710},{"text":"we can follow where that pointer points to","width":101},{"text":"so it points to the first entry in this array ","width":351},{"text":"so we can run this and we see i get the first environment variable","width":244},{"text":"which looks like a key or a name followed by an equal sign followed by its value","width":297},{"text":"so if i was to add one to the pointer","width":244},{"text":"then i move on to the next character pointer","width":196},{"text":"and i get the next entry","width":253},{"text":"so let's put that in a loop","width":121},{"text":"how can i do that","width":63},{"text":"well i can say while i might be tempted to write pointer but that's not going to be particularly useful","width":494},{"text":"instead i want to say whilst the thing that pointer is looking at is a non null value","width":322},{"text":"in other words whilst i have a valid pointer","width":214},{"text":"why? because i happen to know that this array has one extra entry at the end which is the null entry","width":400},{"text":"meaning that its got a pointer that points to nothing","width":139},{"text":"and let's also increment our pointer at the end","width":171},{"text":"great so we can run this and get a look at all of the entries","width":414},{"text":"in fact why don't we set a couple of entries here","width":258},{"text":"so export secret to be 123456","width":324},{"text":"let's try that and run our program again","width":183},{"text":"this time when we run it","width":128},{"text":"the environmental variable secret is part of the environment of our running program","width":480},{"text":"if you already know the name of the environment variable that you wish to use","width":346},{"text":"you can get to it directly","width":125},{"text":"so we can also say hey give me the environment variable and give it a name","width":287},{"text":"for example secret and this will give me back a pointer to a character array","width":603},{"text":"oops i better call it secret","width":188},{"text":"let's print it out and quit","width":163},{"text":"so the secret is and we can call exit","width":992},{"text":"great i've got a little program that can print out secrets","width":222},{"text":"so now i can make my program check that the secret is set for example","width":320},{"text":"for example if I try to get an environmental variable that doesn't exist","width":465},{"text":"then my pointer is actually going to be nil","width":288},{"text":"let me show you that","width":94},{"text":"let me try to print out the value of secret as an integer","width":486},{"text":"so my secret pointer is pointing to nothing","width":268},{"text":"we didn't set that environmental variable yet","width":126},{"text":"so we for example i could say look if secret is null then i'm not going to let this program run","width":662},{"text":"i am just going to stop","width":294},{"text":"so we'll stop and let's now change it so that very secret is something like abc","width":779},{"text":"and when we run the program again this time you'll see that secret is a valid integer value so that's just an integer representation of the pointer","width":793},{"text":"and we got back at that memory location the contents of that environment variable ABC","width":469},{"text":"okay that's enough for me now it's time for you to play","width":124},{"text":"bye","width":48}],
  // Video 10
   [{"text":"let's talk about strings today","width":165},{"text":"first of all, these two things are very different","width":171},{"text":"I could have a pointer to \"hello world\"","width":403},{"text":"or I could have an array of characters to \"hello world\"","width":492},{"text":"though both ptr and array points to the first letters","width":353},{"text":"some things that are noteworthy here is first of all they have different sizes","width":303},{"text":"so let's look at the sizes of each of these, perhaps you can guess what the result is going to be","width":405},{"text":"so you'll see the size of the pointer is the number of bytes to actually hold the character pointer","width":307},{"text":"which as this is a 32-bit machine is four bytes","width":226},{"text":"the size of array is the total size required to hold the whole array","width":420},{"text":"so when this code runs it's actually going to copy the contents of that string literal \"hello world\" into the new array object","width":564},{"text":"so in this case we need twelve bytes for that, eleven for \"hello world\" plus a twelfth to hold the null character at the end the bit pattern zero to say okay we've reached the end of the string","width":769},{"text":"their sizes is very different, plus remember that because we've made additional memory on the stack","width":496},{"text":"we can change it so I can change it to \"jello world\" for example","width":272},{"text":"let's start manipulating our string","width":234},{"text":"we'll do this on our array so we can actually make modifications to it","width":240},{"text":"how about we change all the 'l's to a different letter","width":242},{"text":"so we'll change and we'll pass the beggining of the array","width":255},{"text":"so let's pass in the array and afterwards we'll print what the array is so that's %s","width":985},{"text":"alright so I'll have my function called change down here and it takes a pointer to that memory","width":378},{"text":"so we don't need to return anything because we are actually going to be using the parameter to point to some memory that we are going to change","width":506},{"text":"what can we do with this?","width":121},{"text":"well let's have a little loop that says while(p) that says while p is non zero","width":433},{"text":"actually what we care about is whether p is pointing to memory that holds zero","width":316},{"text":"in other words, we've reached the end of the string","width":142},{"text":"we want to follow the pointer we want to dereference the pointer and for that we need the asterisk","width":290},{"text":"okay so what should we do with this. well we could change all of the letters","width":429},{"text":"for example we could blank it out","width":173},{"text":"we could say star p equals","width":147},{"text":"and it might be tempting to write an astericks here","width":376},{"text":"but that's not right because the asterisk means I've given the address of the asterisk","width":473},{"text":"so I'd be writing an asterisk into the address of the asterisk into that occasion","width":483},{"text":"if I run this I get a few warnings","width":134},{"text":"but it runs and it runs it for forever because my loops runs forever","width":257},{"text":"so let me ctrl-c that to break it","width":171},{"text":"this time change the loop so I add one to p each time","width":504},{"text":"so now I've got a very strange character because it's taken the lowest eight bits and copied that into my character","width":555},{"text":"instead let's change that to the actual bitwise pattern of my character","width":326},{"text":"now I've got something which can get rid of swear words by over writing them with asterisks or perhaps a password or something","width":573},{"text":"but we didn't want to do that for all the characters, we just wanted to do that for the l's","width":208},{"text":"so let's see if my p is, at when I look at that memory location, whether it's a lowercase l","width":594},{"text":"and as I said before because we are working with characters it is ok to compare them so note the use of double equals here","width":553},{"text":"okay so let's run that","width":341},{"text":"we have a couple of errors here","width":204},{"text":"for starters we're not using pointer","width":150},{"text":"so I can comment out that line","width":111},{"text":"I've got another problem here which is that change is implicitly declared","width":289},{"text":"that's because we haven't declared what the function signature of change() looks like","width":301},{"text":"let's do that now","width":89},{"text":"I'm going to say later on compiler, I expect to actually define a function and I'll give you the actual code to create this change method","width":700},{"text":"but for now here is what it's signature looks like","width":153},{"text":"it's called change, it takes a pointer to a character and it doesn't return anything","width":272},{"text":"so if I compile that now my warnings should go away","width":283},{"text":"great so I've got a function that can walk through","width":402},{"text":"I could have another function that finds letters as well","width":186},{"text":"so for example suppose we wanted to find the first o in this","width":503},{"text":"I could change this so that rather than changing the letters","width":413},{"text":"if the contents of p is an 'o', let's return p","width":466},{"text":"now I'm going to change my method signature","width":243},{"text":"and I'd better have a return value that returns something if I get to the very end","width":338},{"text":"so for example, it returns where p is","width":324},{"text":"we can now update my original code so that it finds the first 'o' and gives you back a pointer to that","width":876},{"text":"if I print that out","width":93},{"text":"hopefully you can guess what my program should do","width":407},{"text":"okay so it gave us back a string and it this time the pointer was half way through \"hello world\"","width":453},{"text":"that's OK, our pointers don't care what they point to","width":278},{"text":"we know that strings will continue until we reach the null byte at the end","width":384},{"text":"so that's how we were able to print out hello world","width":257},{"text":"okay that's enough for me, time for you to play. bye!","width":83}],
  // Video 11
  [{"text":"Hello! Let's talk about automatic variables","width":204},{"text":"so here's my main method I've got two function calls f1 f2","width":328},{"text":"and today I'm going to actually define them before my main method","width":266},{"text":"so I don't need to put in the additional declares in","width":211},{"text":"so let's have f1 here and f2...ok","width":353},{"text":"so now I've got a syntactically correct program","width":257},{"text":"but I want to talk about the variables that we might put inside these","width":182},{"text":"so if I create a variable like this to say \"hey I've got a value here, something I need to compute inside f1\" or maybe I want to make an array","width":718},{"text":"so here's my array and I can initialize it to, say, \"f1f1\" here we go","width":529},{"text":"then the lifetime of my array (this variable) is only for the lifetime of the function","width":456},{"text":"when I return from f1, then the variable goes out of scope","width":307},{"text":"which means the name \"array\" doesn't mean anything anymore inside our program","width":271},{"text":"but secondly, the memory that we were using for the array is automatically free'd up","width":298},{"text":"it can be reused for other purposes in a moment by the rest of the program","width":197},{"text":"so isn't that fantastic","width":131},{"text":"that's why it's called an automatic variable","width":160},{"text":"so automatic variables are very easy to use","width":140},{"text":"they also come with a big warning sticker and that's this","width":273},{"text":"which is to be very wary of just how long they live for","width":440},{"text":"let's do a couple of things here","width":126},{"text":"first of all, let's make it so that we can actually see the pointer in memory where array is pointing to","width":671},{"text":"so, let's print that out inside our function here","width":341},{"text":"remember that the name of the array (when converted to address) gives us the very beginning of the array","width":400},{"text":"and, we'll do that for our second function too","width":172},{"text":"okay, so, f2 f2","width":220},{"text":"just to prove that they're making different arrays","width":215},{"text":"okay, so we'll compile and run this","width":190},{"text":"and, when we run it, we see that both f1 and f2 both these functions the array is actually stored inside the same memory location","width":864},{"text":"isn't that fantastic. we didn't need any additional memory","width":155},{"text":"and that's because after we return from f1, any of those automatic variables are free'd so they are no longer needed so we can reuse that space","width":598},{"text":"internally, later we'll discover that a stack data structure is used to implement this","width":497},{"text":"and I can show a little bit of this by having a either a recursive function or we can make another function call these","width":611},{"text":"so for example, I could have a function called eg","width":421},{"text":"and, this calls f1","width":146},{"text":"so now let's have a look in the case that I'm not using f2 anymore","width":363},{"text":"so that can go away","width":180},{"text":"instead, I've got a function called eg and that can say have its own space","width":365},{"text":"so, blah and maybe say a thousand and twenty four bytes here","width":571},{"text":"and then we call f1 again","width":142},{"text":"so let's run this now","width":474},{"text":"so, in the output, you'll see that f1 is printed twice and the second time it's because it's being called from our function eg","width":784},{"text":"and in this case, it's further down in the stack. it's in lower memory","width":348},{"text":"f948 as opposed to fd50","width":154},{"text":"because it's being called from eg","width":335},{"text":"so, we'll see more about the stack in a moment","width":162},{"text":"later on. I just wanted to show you that they really are stored in different places","width":326},{"text":"finally, to reinforce this idea, let's make a little recursive function","width":348},{"text":"so, I can have something which takes an integer say I'll call it \"level\"","width":488},{"text":"and if level is greater than zero, let's call ourselves again with a slightly reduced value","width":667},{"text":"and I can of course make that simpler by just saying \"if level\"","width":272},{"text":"so if level is nonzero, then call it again","width":125},{"text":"and let's call it with say five","width":178},{"text":"okay, a semicolon would help","width":303},{"text":"each case as we go deeper and deeper into recursion, our array is getting lower and lower and lower in memory","width":587},{"text":"so we have all of these arrays created. all of these different activation records in different places","width":370},{"text":"inside our processes's memory","width":181},{"text":"so the last point we'll make, which is the most important, which is that it's very dangerous to return pointers to memory that is no longer valid","width":472},{"text":"for example, rather than returning nothing returning void, suppose we try to return a pointer to our array","width":659},{"text":"then though this code might compile, okay, I can get rid of \"level\" now","width":557},{"text":"it's certainly not a valid program because the pointer we get back from f1 now points to stale memory","width":631},{"text":"that memory is no longer ours to control","width":167},{"text":"it will be used in a moment for other function calls","width":182},{"text":"so always be careful if you are returning a pointer to something. make sure that that memory is still valid","width":413},{"text":"and never return a pointer to an automatic variable","width":208},{"text":"that's it for me. time for you to play. bye!","width":187}],
  // Video 12
   [{"text":"welcome so let's talk about some options other than automatic variables","width":350},{"text":"so here's a little problem i've got so far","width":121},{"text":"in my main method i want to print out the current time ","width":273},{"text":"and i'm going to write my function called currenttime that returns a new string array","width":460},{"text":"i already know that i cannot make an array in here to hold the result","width":385},{"text":"say with two hundred and fifty because when I go to return from this function","width":333},{"text":"the array variable won't be pointing to memory that is valid any longer","width":424},{"text":"so here is two options","width":102},{"text":"i could make my array static","width":130},{"text":"so how do i do that","width":127},{"text":"just by the keyword static","width":106},{"text":"so for example if i were to just say okay i've got myself a static array out here outside of that method","width":445},{"text":"then my array lives forever or at least for the length of my process","width":377},{"text":"so that gets rid of the problem of having some space","width":260},{"text":"i cheated i said look just give me some space for the lifetime of my program here ","width":319},{"text":"so that's what static does","width":167},{"text":"i can also put this inside the function","width":174},{"text":"that doesn't change the lifetime of the variable","width":125},{"text":"it just changes the scoping","width":126},{"text":"so as always that means simply that now the variable name array can only be connected to that piece of memory inside my little method","width":756},{"text":"so it's just changing how the actual name of the variable is bound to the memory","width":380},{"text":"so that's one method","width":134},{"text":"but instead i want to talk about a completely different way which is to use malloc","width":379},{"text":"so you're going to come across malloc calloc and realloc","width":703},{"text":"today let's talk about malloc ","width":124},{"text":"which essentially means give me some bytes","width":192},{"text":"and i can say how many bytes i need","width":204},{"text":"and that storage space is found inside the program's heap","width":271},{"text":"so for example if I want one hundred and twenty eight bytes I would say malloc one hundred and twenty eight","width":275},{"text":"so this is going to give me a pointer to the very first byte","width":245},{"text":"so let's store that inside my little character pointer here","width":294},{"text":"and i'll say there is my result","width":285},{"text":"it is possible that malloc fails","width":268},{"text":"if it is unable to give me one hundred and twenty eight bytes it would give me back an invalid pointer pointed to null or pointed to nothing","width":381},{"text":"so i could say look if result is zero or null or if i wanted to be really terse I could say if not result","width":684},{"text":"in other words result is null","width":115},{"text":"then just return that null pointer","width":176},{"text":"i am not going to try and use it","width":130},{"text":"it's not a valid pointer","width":135},{"text":"otherwise let's put some things inside this and I could turn the current time and store it inside that array","width":620},{"text":"so let me use a function called strcpy to put in the current time which is two fifty one pm","width":572},{"text":"#include <string.h> let's run this","width":887},{"text":"and my program calls currenttime creates some memory and then returns it","width":375},{"text":"this is fantastic right","width":63},{"text":"i've now got a way to make long lived pieces of memory and put data inside them","width":365},{"text":"but with great opportunity comes great responsibility here ","width":207},{"text":"so what we should do is let our programs is with every malloc we should at some point free up that memory to say hey i've finished with it","width":640},{"text":"so the correct way to do this is to keep a pointer around","width":191},{"text":"so let's have a pointer down here","width":280},{"text":"and when i finished using that memory","width":169},{"text":"i can free it","width":122},{"text":"to say hey this memory is no longer being used","width":128},{"text":"this block of memory of one hundred and twenty eight bytes is no longer being used","width":289},{"text":"please put it back into the heap and maybe we will reuse that memory again for a future malloc","width":566},{"text":"so good programs will have one free for every malloc ","width":353},{"text":"in the next video i'll talk about some of the mistakes that we can make with heap allocation","width":334},{"text":"but now it's time for you to play with malloc ","width":162},{"text":"bye","width":52}],
  // Video 13
  [{"text":"hi welcome","width":116},{"text":"so we have got a little function so far called currenttime()","width":136},{"text":"that requests 128 bytes from the heap","width":307},{"text":"and then providing we get a non-null pointer back from malloc","width":263},{"text":"we will copy in the time 2:51 PM into that memory","width":288},{"text":"and then return a pointer to the first byte of that memory so that's our little currenttime","width":262},{"text":"we've been careful to make sure that if malloc fails, perhaps our program has used all of the heap memory","width":411},{"text":"then we don't try to use that null pointer","width":207},{"text":"but now let's actually make it so that it actually makes a call to find out what the current time is","width":540},{"text":"the current time is known by the system","width":114},{"text":"so it's time to make a system call and then we will format that using a c function called ctime()","width":529},{"text":"to actually give us a human readable version of the time","width":328},{"text":"both of these functions can be found inside the include time.h","width":306},{"text":"I've commented them up here","width":113},{"text":"so the first think we can do is call time so when you call time you can pass it a pointer to a time_t variable","width":717},{"text":"or you can say actuall I'm not going to give you anything and it will still give you back the time in its result","width":512},{"text":"so let's just use the result","width":145},{"text":"so here's the number of seconds since 1970","width":534},{"text":"we'll store that inside our little variable called secondsSince1970","width":359},{"text":"but I don't want that as a value, I just want to turn that into a string","width":224},{"text":"for that there's a function called ctime, this a library function. there are other functions that give greater control to the precise formatting","width":630},{"text":"but for this demo let's just use ctime() which has some reasonable formatting that most people can understand","width":617},{"text":"this will give us back a pointer to the time","width":319},{"text":"so the time in ASCII, in otherwords in letters, in readable time","width":484},{"text":"and then we can use that and copy that result into new memory, into our result","width":526},{"text":"so one problem with ctime() is that it uses static storage","width":339},{"text":"in other words it's great if you just want to call it once, and it will use it's static storage to give you back the time in a readable format","width":674},{"text":"but don't expect that to stay around because if you call ctime() again in the future it is going to overwrite those bytes","width":455},{"text":"and that's why our little function here called currenttime() is useful","width":200},{"text":"we are going to take that temporary result and put it into some memory that is ours to control","width":403},{"text":"so it can't be overwritten","width":174},{"text":"we need to pass in seconds since midnight","width":223},{"text":"except we've got a problem here","width":208},{"text":"it doesn't actually want the value, it wants a pointer to this variable, it wants to know where in memory this variable is","width":554},{"text":"for that I have to introduce some new syntax, which is the &","width":270},{"text":"when you see & it means that I don't want to know about the variable itself, but where it is stored in memory","width":523},{"text":"tell me the address of the variable","width":305},{"text":"we didn't need this for arrays because that's what the array name gives us automatically","width":224},{"text":"but for other items we can use the & to find out where it is stored in memory","width":500},{"text":"let's compile and run it","width":374},{"text":"and we find out that my little virtual machine thinks it's Jan 1 2014","width":389},{"text":"not very accurate, we should probably change it, but it did print out what it thinks the current time","width":487},{"text":"I promised you that I'd mention a few more mistakes that we can make with heap memory","width":479},{"text":"one mistake we can make is to double free the same pointer","width":423},{"text":"this can lead to all sorts of horrendous problems because when you tell the heap that you've freed with some memory it might actually use that memory for it's own book keeping","width":719},{"text":"so it knows that the particular block of memory is free","width":275},{"text":"if you free it again it can confuse the book keeping, the pointers that the heap is using itself","width":684},{"text":"once we've freed some memory, dont free it by accident a second time!","width":208},{"text":"another common mistake in C programs is to continue using memory after we've freed it","width":536},{"text":"we shouldn't consider that memory to be valid anymore","width":175},{"text":"perhaps it's going to be reused by some other part of the program that is about to call malloc()","width":458},{"text":"and certainly we shouldn't expect anything that we've previously stored in there to be valid","width":469},{"text":"once we've freed it don't try to use the pointer again","width":188},{"text":"so for example, this would be an error","width":217},{"text":"so how can we guard against some of these errors?","width":199},{"text":"one common defensive programming technique is once we free a pointer set that pointer to be NULL","width":498},{"text":"to mean that I'm not pointing to anything anymore","width":212},{"text":"so this avoids the problem of what is called a dangling pointer error","width":429},{"text":"that now our pointer is no longer pointing to invalid memory","width":541},{"text":"that's it for me. time for you to play, bye!","width":231}],
  // Video 14
  [{"text":"Hi, welcome!","width":94},{"text":"let's talk about creating more complicated data types in C","width":294},{"text":"so far, we've talked about integer and character pointers","width":220},{"text":"what if we wanted to make something more complicated like a linked list?","width":196},{"text":"for that, we will use a struct","width":193},{"text":"so, let's say we've got a struct and we'll say my struct I'll call it say Link","width":561},{"text":"and what should we have inside this?","width":80},{"text":"well, we've have a value to store and we'll need a pointer to the next link","width":310},{"text":"we'll need to know where the next link is in memory","width":117},{"text":"so, we can say struct Link and it's a pointer to that","width":368},{"text":"so, don't forget the asterisk","width":80},{"text":"so that's our little struct here. a semicolon is required at the end","width":297},{"text":"but it's kind of painful to keep saying \"struct Link\" every time I want to refer to this type","width":412},{"text":"so I can have a link here called \"one\" for example","width":204},{"text":"so quite often, we can use, or you'll find that people use \"typedef\"","width":277},{"text":"to say \"here's an alias\" and I can use typedef with any kind of type","width":417},{"text":"I can even use it with integers","width":139},{"text":"for example, I can say typedef number","width":168},{"text":"now I can say \"number x\" instead of \"int x\"","width":368},{"text":"but today we're going to use typedef for our link","width":190},{"text":"so we'll say instead of having to write struct Link, I'll call this my link type","width":416},{"text":"so now I've got my link type, I can make a link","width":238},{"text":"here's one","width":63},{"text":"and if I declare variables like this, outside of my functions, then they live forever","width":614},{"text":"and, let me write my main method here","width":326},{"text":"so, my link called \"one\" and my value live forever","width":395},{"text":"and in fact, they're initialized","width":87},{"text":"so their bitwise pattern is just all zeros","width":212},{"text":"so in other words, my value will be zero and the link \"one\" will have a value of zero and its next pointer will have a value of zero as well","width":740},{"text":"if we wanted to change that, then we could say one.value equals fourty two","width":369},{"text":"and one.next equals well, where should we put it?","width":237},{"text":"well where should we send it next?","width":98},{"text":"we could say \"NULL\" if we wish to use NULL, actually we have to #include <stdlib.h>","width":570},{"text":"to have NULL defined","width":185},{"text":"and now our Link says \"I'm the last thing. there's no one after me\"","width":354},{"text":"if we wanted to be particularly crazy, we can make the next pointer point to the very same link","width":425},{"text":"we do that by saying \"one\" except we don't want \"one\" we want the address of \"one\"","width":350},{"text":"we need a pointer to \"one\"","width":70},{"text":"so how do I do that? I use ampersand to say \"give me the address\" of this","width":281},{"text":"so that gives me a pointer to a link","width":121},{"text":"well thats great if we only need one link","width":114},{"text":"but that's not much of a linked list","width":150},{"text":"let's actually work out then how we can actually make a whole load of links","width":292},{"text":"for that, we'll use some heap memory","width":148},{"text":"and I'm going to use malloc which is also declared inside stdlib.h","width":268},{"text":"so, I need some memory","width":160},{"text":"how many bytes do I need?","width":109},{"text":"for that, I can say: \"give me the sizeof my link structure\"","width":225},{"text":"in other words, give me the size of link_t","width":143},{"text":"be careful you don't put an asterisk here otherwise, you'll only be reserving enough bytes for a pointer","width":362},{"text":"in other words, 4 bytes or so","width":109},{"text":"that's not enough for what we need","width":104},{"text":"we need the size of our whole struct","width":247},{"text":"so that gives me back a pointer and I actually want to cast it so that it's type pointer to a link_t","width":528},{"text":"so I can now store that inside a variable","width":227},{"text":"and I can have it as my first pointer","width":261},{"text":"so, malloc does not initialize the actual memory. it just simply reserves it for us","width":371},{"text":"just allocates it for us.","width":89},{"text":"we better make sure that our Link is properly initialized","width":228},{"text":"so for my first Link, I want to set its value to something","width":353},{"text":"and I need to set its \"next\" pointer to something","width":225},{"text":"so for example, I can set it to NULL","width":107},{"text":"or if I, oops, let me change that to put a one","width":271},{"text":"or if I wanted to make it point to itself, I can say \"ptr1\"","width":355},{"text":"if I had two links, let's do that","width":347},{"text":"then I can again set up the values. be very careful when copying and pasting code that you've actually edited it correctly","width":543},{"text":"I can now make my first link ptr1 its next point to next ptr","width":407},{"text":"and the next link, its next pointer can go nowhere","width":440},{"text":"so, there's my simple linked list","width":205},{"text":"more complicated links might have a previous pointer as well","width":246},{"text":"so you can navigate both in the forwards and backwards direction throughout the linked list","width":506},{"text":"okay, so, let's now finally compile this and check that it works","width":403},{"text":"our program compiles correctly, but to be a well-behaved program, really we should free up the memory as well","width":720},{"text":"so don't forget for every malloc you do, we should responsible for freeing up that memory once and once only","width":566},{"text":"so free(ptr1) and free(ptr2)","width":324},{"text":"also, a more robust version of this program would check that malloc actually succeeded","width":377},{"text":"that we actually really got the bytes","width":143},{"text":"that would be something important to do if your program ran for a very long time","width":322},{"text":"or needed very large unknown amounts of memory","width":319},{"text":"so that's how we make linked lists in C","width":184},{"text":"now it's time for you to play. bye!","width":161}],
  // Video 15
  [{"text":"Okay so let's talk about how we can make it easier to create links and destroy them","width":335},{"text":"so i've changed my link class a little bit so now each link can have a key and a value","width":297},{"text":"in addition to the next pointer","width":129},{"text":"the pointer to the next link","width":106},{"text":"okay so let's make some methods to create links and destroy them","width":440},{"text":"we'll do the create one first","width":123},{"text":"so it's going to return a pointer to a link","width":227},{"text":"and i might call it say link_create and I'll expect a key and I'll expect a value","width":721},{"text":"so that'll give me two pointers","width":159},{"text":"if i wish to debug this I could have a printf in here saying hey creating link and I could have what the key and values are for example","width":737},{"text":"right so i need to get some memory","width":165},{"text":"let's get some memory from the heap because we want our link to last for a long time until we decide to destroy it","width":445},{"text":"so i'll say malloc give me some memory and how much well i better ask for how big is my memory structure link_t","width":545},{"text":"and i will cast that return type as a pointer to my link object","width":445},{"text":"why do i do that","width":63},{"text":"well i want to be able to reference the sub parts","width":170},{"text":"the components of my struct","width":119},{"text":"and i will call that say result and i need to initialize my pointer","width":481},{"text":"so now i've got that I can set the key to be a key and the value to be the value","width":499},{"text":"now when i do this i am copying the pointers i'm not creating new strings","width":444},{"text":"so in other words i've now got a pointer called key and it's looking at exactly the same string array as the parameter is","width":499},{"text":"i haven't made any new string arrays","width":203},{"text":"so let's remember that when i return this","width":214},{"text":"that those pointers better be valid for the lifetime of the link","width":288},{"text":"well that's fine if I knew for example that this will always be used with string constants or I am taking control of those values that I send in and I happen to know that their lifetime is longer than the link's lifetime","width":1068},{"text":"so if that's the case then my code is relatively simple like this","width":214},{"text":"and destroying the link is also relatively simple","width":225},{"text":"so let's write a link destroy method destroy","width":205},{"text":"which takes a pointer to the link that is going to disappear so we can call that just p","width":437},{"text":"and what do i need to do in here","width":104},{"text":"well i can simply return the memory back","width":190},{"text":"okay so this works we could do a little better than this","width":253},{"text":"we could actually do some defensive programming here","width":150},{"text":"where we also destroy the information inside that link","width":381},{"text":"so for that i can use memory set","width":190},{"text":"so memset where I give it a pointer that I want to use","width":325},{"text":"the value will be zero the number of bytes can be the size of my link","width":279},{"text":"so this assures that i don't have any dangling pointers","width":258},{"text":"i have destroyed the key and value pointers","width":232},{"text":"i've set them back to null and anything else inside my link has been set to null","width":247},{"text":"so if someone happens to have a pointer to this link and they try to use the contents straight away then it will fail it will be null","width":521},{"text":"and secondly we are freeing it to say okay this memory can now be reused for other purposes","width":356},{"text":"so that's my link destroy method","width":158},{"text":"now suppose we discover that our strings we don't control the lifetime of these string arrays","width":483},{"text":"and that actually we should make copies of them","width":186},{"text":"so how can i do that","width":89},{"text":"well there's a method called strdup so let's do that strdup and this gives me back a pointer to a new string ","width":697},{"text":"a new character array that has been created on the heap","width":223},{"text":"and it's just a copy of that existing character array that we passed it","width":296},{"text":"so let's create our new string arrays and use those","width":296},{"text":"if we do that then when I destroy the link I better free up the memory associated with my key and value","width":470},{"text":"so before ending here I should free up those pointers","width":344},{"text":"so I should call free on my key and free on my value pointer as well","width":641},{"text":"okay so there's my code now to start working with a link","width":780},{"text":"with my main method I will need to always know the beginning of my linked list","width":448},{"text":"so that sounds like a great thing to actually have as a global variable here","width":312},{"text":"so let me have my link pointer here and I can call it root","width":327},{"text":"and so the first link I make I can initialize root to that","width":316},{"text":"to that very first link","width":157},{"text":"okay so that's it for now, it's now time for you to play with creating more links","width":389},{"text":"bye","width":70}],
  // Video 16
   [{"text":"hello welcome","width":63},{"text":"let's talk about how we can get single characters and print them out in c","width":267},{"text":"so here's some functions defined in std.io","width":232},{"text":"i can say give me a single character for example and why don't I just keep calling this","width":400},{"text":"so i could just say while getchar is not equal to a special constant called end of file (EOF) keep going around in a loop","width":590},{"text":"but if I actually want to print them out I better actually store the value of getchar","width":232},{"text":"so let's have an integer value called c and inside my while condition I'm actually going to assign the result into c","width":544},{"text":"so you'll often see this pattern inside systems programming where we take a systems call or a library call and we store the results inside a variable","width":643},{"text":"but because that may also signify an error condition or a termination condition we use it immediately to check inside part of a while loop or an if statement","width":641},{"text":"so we've got a little character loop here that is going to keep going until it gets to the end of the file","width":254},{"text":"so now I want to print it out","width":92},{"text":"guess what i can call putchar and we'll see that running ","width":217},{"text":"so let's run this little program","width":264},{"text":"ABCD","width":90},{"text":"it prints back ABCD","width":147},{"text":"okay so we don't have to display the character just as a character","width":273},{"text":"we can display it as a character an integer and hexdecimal values","width":255},{"text":"so let's use printf for that","width":94},{"text":"so I've got %c %d and %c for character integer and hexadecimal value","width":376},{"text":"alright so let's run this","width":324},{"text":"and you can see that the letter A corresponds to sixty five which is in hexadecimal forty one","width":385},{"text":"right so why don't we use our little program to print out the contents of another file","width":433},{"text":"so if I cat my source code I can see the contents of that","width":292},{"text":"great so I'm going to pipe it into my program","width":273},{"text":"so i'll do ./program and it reads every byte and prints it out as a character","width":526},{"text":"great so let's encrypt our file now so I'm going to modify our value of c if it's not a newline character","width":533},{"text":"so what we'll do is say if c is at least thirty two in other words at least a space an ascii space","width":470},{"text":"and if it is we will change the lowest bit","width":382},{"text":"we'll flip the lowest bit","width":61},{"text":"how can we do that","width":64},{"text":"let's xor it with one","width":169},{"text":"right and then we'll print it out","width":147},{"text":"okay so we'll run this","width":172},{"text":"CDE for example and it changed the C to a B","width":281},{"text":"and if I do 135 I get 024","width":254},{"text":"so to say that I've got to the end of the file when I'm just typing you by the way you can do control d","width":374},{"text":"now see this working on some actual source code","width":226},{"text":"so let's here some text my program.c and i'm going to pipe that into my program to use as its input","width":524},{"text":"and you can see great we've garbled the program","width":264},{"text":"so if I want to I can then take that output and pipe it into my program again","width":444},{"text":"so now i'm going to unencrypt it because i flipped the lowest bit back  ","width":259},{"text":"so we get back our source code","width":133},{"text":"so that's getchar and putchar i can also work with whole lines","width":372},{"text":"i can let's get rid of the loop here i can say puts hello or any pointer to a character array provided its terminated by a zero byte at the end","width":997},{"text":"and that is equivalent to printf by saying %s and \\n at the end","width":560},{"text":"so i've got some character pointer here","width":279},{"text":"right so it's a little bit shorter to type than writing printf","width":480},{"text":"there is the opposite which is to get some input","width":225},{"text":"but this has a problem and we'll see why in a moment why this function actually call is being removed from the c standard","width":392},{"text":"i'm talking about gets so let's call gets and we will have a little buffer here","width":648},{"text":"so let's put a little buffer on the stack here","width":187},{"text":"i'll make it twelve bytes today ","width":109},{"text":"and remember when we call gets with buffer if you use the array name you are talking about the very first byte of the array","width":432},{"text":"and rather than printing out hello","width":175},{"text":"we will print out our buffer value","width":137},{"text":"so let's run this and we can type something in and it echos it back to us","width":509},{"text":"fantastic but what happens if we enter more than twelve bytes","width":262},{"text":"so in other words could something bad happen to our other variables","width":247},{"text":"well yes it could because if we go past twelve bytes we start writing into memory which is used for other purposes","width":353},{"text":"for example in my little program the integer is immediately after the buffer","width":378},{"text":"let's prove this let's set our hex value of c to be ten twenty thirty fourty","width":422},{"text":"let me print that out after we've called gets i'm going to print it again","width":584},{"text":"so we've got to remember that what we store is going to be our letters plus a null byte","width":475},{"text":"so in this case if I do ABCDABCDABCD I've already overflowed because the thirteenth byte is now going to be written into my integer","width":796},{"text":"but i am going to do just a few more I'll do ABCD there we go","width":295},{"text":"and we'll see that I've managed to change my integer value to 41424344","width":412},{"text":"so the last ABC that I wrote in there actually overran my buffer","width":277},{"text":"i've got a buffer overflow and I've corrupted the contents of another variable","width":300},{"text":"so that's why gets is dangerous","width":107},{"text":"there's no way to tell gets that we shouldn't accept input that is too long for it","width":420},{"text":"so in a future video i'll tell you about getline and also fgets which don't suffer from these problems","width":586},{"text":"okay that's it for me thanks for watching and i'll see you in another video. bye!","width":269}],
  // Video 17
  [{"text":"Hello! Let's talk about how we can use scanf and sscanf and fscanf to read some data and convert that into say integers or floats or strings","width":739},{"text":"so we can actually use those values inside our variables","width":232},{"text":"alright, so, I'll start by using sscanf","width":207},{"text":"which can parse data inside a string","width":184},{"text":"inside memory","width":109},{"text":"so for example, let's have a little bit of data here","width":136},{"text":"I'll have my data be my name and a score","width":454},{"text":"and I want to take that and pull it apart into a string and an integer","width":385},{"text":"so I'll have a little buffer here, say, up to twenty characters","width":343},{"text":"and a little integer here","width":102},{"text":"and I could set this to be equal to some arbitrary value. we'll see why in a little bit","width":434},{"text":"and then I'm going to say \"okay, sscanf please read from this string array and what I'd like you to do is convert that into a string followed by one or more spaces and then an integer value\"","width":1146},{"text":"alright so scanf is going to look at our memory starting at wherever our data is pointing at","width":359},{"text":"and, it's going to first of all look for a string until it comes across one space","width":357},{"text":"and then there can be actually multiple spaces in our data","width":155},{"text":"and then after that, it's going to treat the rest of the string as an integer","width":287},{"text":"okay, now, our format specifiers say the kind of data that we want to interpret and also the number of bytes that should be written to when it is trying to parse its data","width":730},{"text":"so we better tell it where to exactly put these things","width":154},{"text":"so for our string, we want it to write it into a buffer","width":234},{"text":"and for the score, we want to write it into our score variable","width":199},{"text":"but hold on a moment","width":114},{"text":"when we say \"buffer\" yes that gives us the beginning address of our array","width":372},{"text":"but not for score","width":63},{"text":"score is just going to give us whatever value score happens to hold","width":170},{"text":"in this case, negative forty two","width":124},{"text":"that's not what we need","width":69},{"text":"we actually want the address of this variable","width":132},{"text":"so we're going to say ampersand score","width":239},{"text":"so, lets read that and we'll print it out","width":271},{"text":"so here's the result and we'll say %s %d and we'll print the contents of the buffer and print the value of score","width":592},{"text":"so notice that scanf and printf, the arguments don't always look the same","width":266},{"text":"when we want to print out the values, we don't actually want to just print out the address of score","width":389},{"text":"we actually wanted to know what the value is","width":106},{"text":"great so that read that correctly","width":202},{"text":"scanf actually tells us something else which is how many arguments it correctly managed to parse","width":428},{"text":"so let's make a note of that and we'll print that out","width":299},{"text":"so, we'll say %d here","width":313},{"text":"print out the result in our printf statement here","width":183},{"text":"so now when we run it, we'll see that sscanf managed to read both iterms","width":384},{"text":"I got result two","width":90},{"text":"fantastic. so that's useful. now we can write robust programs to check if we really did write into both variables","width":521},{"text":"now you might be worried that scanf could result in a buffer overflow","width":286},{"text":"and, in fact, in our current code, you'd be right","width":168},{"text":"so if I had a very long name with no spaces here","width":419},{"text":"then that's longer than our buffer","width":229},{"text":"so what we need to do is tell scanf just how big our buffer is","width":209},{"text":"so in this case, it should be nineteen","width":207},{"text":"because we're setting scanf how many character to read from the input","width":321},{"text":"and our buffer, of course, if going to need one extra one to hold the terminating byte for this string","width":397},{"text":"so let's run this now","width":483},{"text":"and you'll see that first of all the name is truncated and that secondly, the return value of our scanf call here was one","width":538},{"text":"and it only managed to read into the buffer","width":259},{"text":"it gave up trying to read the integer because our buffer wasn't long enough","width":190},{"text":"and, in fact, our score variable still contained its original value","width":305},{"text":"of negative forty two","width":123},{"text":"so good defensive programs must check that the return value is reasonable","width":389},{"text":"also, when writing scanf or sscanf or fscanf, it's always a good idea to carefully check to see whether you should be looking at the address of the variable or if the variable itself actually is a pointer","width":783},{"text":"and is already going to give you the memory address that you'd like scanf to change","width":532},{"text":"alright so we've read data from a string ","width":263},{"text":"we can also parse data from a file stream and how can we do that? well you can use not sscanf but fscanf","width":663},{"text":"and if you did that, you better give it a file stream","width":182},{"text":"there's one called stdin already","width":209},{"text":"if we didn't want to use that, then we could open up a file using fopen and then pass in the file handle here","width":564},{"text":"and reading from stdin is such a common occurance that in fact there's another form of this which is just say scanf","width":699},{"text":"and if you do that, that means \"hey, just read from stdin\"","width":188},{"text":"so now, let's run our program here","width":555},{"text":"and, now it's waiting for input","width":99},{"text":"so let me typing something","width":130},{"text":"I'll say \"Angrave one hundred\"","width":324},{"text":"great! and it managed to parse both variables","width":177},{"text":"okay so that's enough introduction to scanf","width":188},{"text":"remember this next time you're trying to read 3d data and points and you want to say convert those ASCII numbers into actual floats and doubles","width":640},{"text":"and also remember that its important to read exactly how scanf uses these format specifiers because its not quite the same as printf","width":624},{"text":"alright, that's it for me. time for you to play. bye for now","width":278}],
  // Video 18
  [{"text":"hello welcome","width":111},{"text":"let's talk about getline","width":93},{"text":"so it's very very common to read in a single line of text either from the user or from a file","width":438},{"text":"and we would like it to be very easy to say hey \"let's not worry about making sure my buffer is large enough\"","width":384},{"text":"I just want to get the whole line","width":95},{"text":"and thus getline was born","width":130},{"text":"this is being adopted into the posix standard","width":215},{"text":"if you are working however with older standard and an older compiler we have to ask gcc to explicitly enable it","width":463},{"text":"so before doing our includes with stdio we need to define _GNU_SOURCE","width":575},{"text":"so if we do that we would like the gnu source additions to the standard functions","width":473},{"text":"right so if we do that now we have got a getline declaration included as part of the #include <stdio.h>","width":478},{"text":"so here is how we can use getline","width":228},{"text":"with getline we actually set up two variables","width":284},{"text":"we get getline to manipulate these directly ","width":287},{"text":"we are going to have a pointer to a buffer","width":319},{"text":"and a little int to say how big is our buffer","width":369},{"text":"well let's just check to see really if it is an int or if we should be doing a different type","width":226},{"text":"so let me pull up my favorite manpage on getline","width":362},{"text":"see that actually the correct type to use is size_t","width":398},{"text":"which is essentially an unsigned int or larger on some systems","width":259},{"text":"so let's just make a note of that","width":99},{"text":"that is the declaration that we are going to be using","width":210},{"text":"and so we will have not just a buffer to our character array","width":377},{"text":"but also size as well to say how big is our buffer","width":328},{"text":"and i will call this say capacity","width":168},{"text":"right so we could start calling this and we could say okay","width":256},{"text":"get me a line and oh i need to pass in a pointer to my buffer variable","width":441},{"text":"right and notice that the declaration here is star star asteric so it's a pointer to a pointer","width":513},{"text":"right so how did i get that","width":97},{"text":"i say okay give me the address of my variable","width":223},{"text":"and similarly for the capacity as well","width":150},{"text":"the size of the variable","width":126},{"text":"so give me the address of my capacity","width":317},{"text":"and getline is going to modify those two variables directly","width":222},{"text":"essentially if my buffer is not large enough","width":189},{"text":"it is going to free up the old buffer and then call malloc so that we get a larger buffer","width":518},{"text":"okay technically it might call realloc but let's not worry about exactly which library call it calls","width":335},{"text":"we just know that it's going to do all that buffer maintenance for us automatically","width":266},{"text":"and now we need to give it a filestream so why don't we use say stdin","width":413},{"text":"now right now our code suffers from a terrible flaw which is that we've assumed that our automatic variables buffer capacity will be set to nothing","width":546},{"text":"so the getline knows that it can't reuse what it happens to be pointing to","width":264},{"text":"so we actually need to set these to explicitly to null and the capacity to zero","width":403},{"text":"so the first time we call getline getline will see that the buffer is certainly not large enough and will allocate enough space","width":502},{"text":"we can now find out what the result is which is the number of characters getline has managed to retrieve","width":519},{"text":"or a negative value if it failed","width":127},{"text":"so let's make a note of that","width":146},{"text":"and we'll print this out","width":125},{"text":"so i'll print it out as an integer and let's have a look to see what we can find inside our buffer","width":445},{"text":"so we want the result and we want the buffer","width":227},{"text":"and lastly let's put a newline here","width":169},{"text":"okay so we'll run our little program here","width":385},{"text":"and now it's waiting for me to type something","width":368},{"text":"okay great so it says i have got six characters","width":218},{"text":"wait and i printed ABCDE","width":102},{"text":"actually the last character might be a newline character","width":355},{"text":"and quite often we don't actually need that","width":152},{"text":"so why don't we overwrite the very last character with null with a terminating byte","width":439},{"text":"so let's write the code for that","width":160},{"text":"first of all we only want to do that if we get at least one character back from getline","width":289},{"text":"so let's check that the result was positive","width":300},{"text":"and also we only want to do this if we are going to overwrite the last character which truly is a newline","width":385},{"text":"we could imagine for example reading from a file where the very last byte is not actually a newline","width":363},{"text":"so we should just check to see what we're going to write here","width":233},{"text":"so let's look inside our buffer and where do we want to look?","width":275},{"text":"well if we read one character that would be at the beginning of the buffer","width":403},{"text":"so we need to look at result minus one","width":129},{"text":"so if that is equal to the character of a newline","width":352},{"text":"then let's truncate the string","width":262},{"text":"the easiest way to do that remember is strings are just terminated by zero","width":190},{"text":"so let's just put a zero directly into that byte","width":188},{"text":"so we are going to say at the same spot set that equal to zero","width":356},{"text":"right so let's run our program again","width":534},{"text":"okay so this time it read it correctly and in our printf we didn't get that unwanted extra newline","width":570},{"text":"alright our program right now is allocating memory on the heap","width":270},{"text":"we don't do it we let getline do it","width":127},{"text":"but it's actually up to us when we finish using getline to free that buffer","width":362},{"text":"right so let's do that","width":121},{"text":"let's at the very end here we can call free on the buffer","width":316},{"text":"we don't need to do that every time we call getline because getline by default will try to for performance try to reuse the buffer for each line it gets","width":576},{"text":"so for example we could call getline twice and it would try to use the same buffer","width":511},{"text":"but the big take home message for getline is first of all","width":186},{"text":"you are going to need a pointer to a buffer and a capacity variacle which getline itself is going to change the contents of","width":470},{"text":"as you call it it can make the buffer as large as","width":304},{"text":"each time you call getline it might change that buffer to point to some new memory if the buffer needs to be larger","width":439},{"text":"secondly it's a great idea to check the return value of getline to see how many characters it managed to read","width":469},{"text":"and also to see if there was an error or not","width":138},{"text":"and the return type for that is ssize_t for a signed size integer type","width":469},{"text":"and finally it's good practice to don't forget to free the memory that is pointed at by your buffer variable","width":546},{"text":"okay that's it for me","width":87},{"text":"have fun playing bye","width":78}],
  // Video 19
  [{"text":"Hello welcome","width":135},{"text":"so this video is a little introduction to signals","width":222},{"text":"so signals are like a software interrupt","width":198},{"text":"we can use them to control our processes and even do things asynchronously","width":322},{"text":"so let's have a look at a little program i have written so far that doesn't use signals yet","width":333},{"text":"all it does is ask for the environment of home","width":181},{"text":"in other words the user's home directory","width":172},{"text":"and then we have a little loop that prints it out and sleeps for three seconds","width":314},{"text":"so every three seconds it is going to print out my home directory","width":211},{"text":"and on this machine i am root so it just keeps on printing out slash root","width":387},{"text":"so of course we can stop this program by pressing control c","width":383},{"text":"and when you do that you actually are sending a signal","width":195},{"text":"sigint or sig interrupt to the process","width":261},{"text":"now it maybe that our process doesn't like being interrupted","width":198},{"text":"why don't we catch that signal and install our own little handle for that","width":319},{"text":"so here is how we will do this","width":158},{"text":"i am going to say at the beginning of my program that if you get a certain signal say sigint ","width":797},{"text":"rather than having the default behavior which as we know is to stop the program or quit the program","width":367},{"text":"let us run my code instead","width":113},{"text":"so i will call it say nothankyou","width":227},{"text":"so what is nothankyou","width":113},{"text":"it has to be a pointer to a function","width":252},{"text":"how do we do that","width":61},{"text":"easy just write a function","width":75},{"text":"and in this case the correct type is something that doesn't return anything","width":310},{"text":"but does take an integer","width":136},{"text":"in fact it is the signal that is being sent to our program","width":253},{"text":"and so that we know that this is being called let's write something out directly to standard output","width":342},{"text":"so i can say write and i can say no","width":219},{"text":"so what is that that is a little message of three bytes to send","width":228},{"text":"so let's run this now","width":155},{"text":"okay so here is my program every three seconds it is going to print root","width":248},{"text":"but now i am going to press control c","width":359},{"text":"and it prints no no so it's refusing to quit","width":405},{"text":"you might also notice that the sleep also immediately returns","width":242},{"text":"more about that later","width":99},{"text":"it is still possible to stop our program here","width":180},{"text":"if we do control backslash then we force it to quit","width":382},{"text":"so sigint is one common signal that we send our programs","width":259},{"text":"there are many others","width":92},{"text":"just for fun let me show you one called sigalarm","width":239},{"text":"so this time i am going to say alarm seven seconds","width":498},{"text":"and so when you call alarm you are going to say give me a special signal called sigalrm in this many seconds","width":626},{"text":"in seven seconds","width":82},{"text":"and we better install then","width":112},{"text":"well let's just run it and see what happens to begin with","width":795},{"text":"so the default behavior of this sigalrm is to actually stop our program","width":299},{"text":"it quits the program","width":103},{"text":"that's a pretty aggressive alarm clock i think you'll agree","width":175},{"text":"and it also as you see prints out alarm clock on the shell","width":233},{"text":"perhaps we don't want our alarm signal to be so menacing","width":308},{"text":"so this time instead of sigint i can say look for a certain signal called sigalrm","width":452},{"text":"please call my function instead","width":515},{"text":"okay so there we go our alarm went off after four seconds and this time we asynchronously ran our code that printed out no to standard out","width":704},{"text":"so this is pretty exciting right","width":98},{"text":"you probably thought about interrupts on the hardware level","width":228},{"text":"now we can do interrupts at the software level and we can respond to things which happen in our environment very quickly","width":459},{"text":"so we will find signals to be very useful when we start dealing working with more than one process","width":381},{"text":"we can control our programs and we can also work with very large amounts of data coming in","width":371},{"text":"alright that is enough for me","width":106},{"text":"bye","width":36}],
  // Video 20
  [{"text":"so usually we think about our programs as just turning into one single process","width":299},{"text":"now i am going to show you some systems programming magic","width":187},{"text":"where actually we can turn our single process into two","width":217},{"text":"here is how we are going to do it","width":105},{"text":"let us have a very simple program that says hello world","width":216},{"text":"and here it is","width":138},{"text":"so between these two lines however","width":198},{"text":"i am going to call fork","width":426},{"text":"and here's a surprise","width":91},{"text":"we get hello world world","width":90},{"text":"yes we get two worlds","width":129},{"text":"why is that","width":65},{"text":"well at the beginning there was a single process","width":117},{"text":"but then we called fork and now our single process is actually being cloned","width":340},{"text":"it has been split into two","width":111},{"text":"so both the processes print out world","width":164},{"text":"and so we see both their output on our little terminal here","width":297},{"text":"okay what else can we do with this","width":97},{"text":"well let us first of all show that there really are two different processes","width":192},{"text":"i am going to look at their processor id","width":351},{"text":"and we will print it out","width":168},{"text":"so i will call getpid()","width":102},{"text":"and you will see that yeah i have got two different processes","width":258},{"text":"both trying to run at the same time","width":191},{"text":"in fact i have got a parent child relationship here","width":289},{"text":"i have got the original process","width":128},{"text":"the parent","width":63},{"text":"and you can think of fork as saying let us clone this original process right here right now","width":375},{"text":"so that i get a child that looks just like me","width":153},{"text":"or at least almost like me","width":111},{"text":"in many many respects","width":63},{"text":"it is the same memory","width":152},{"text":"it has got it's own variables","width":63},{"text":"but because its got its own address space","width":251},{"text":"what the child now does in terms of its memory is seperate from the parents","width":369},{"text":"okay so let's show you what we can then do with this","width":330},{"text":"first of all fork actually returns something here","width":154},{"text":"it actually returns back an id","width":192},{"text":"so let's make a note of that","width":188},{"text":"and we'll print it out","width":124},{"text":"so we'll say %d and we'll print out just here","width":552},{"text":"okay so here is what we see","width":166},{"text":"that the process id 681 has fork value of 682","width":562},{"text":"and process 682 has a fork return value of 0","width":386},{"text":"so the fork value is different for the parent and the child","width":290},{"text":"and in fact fork","width":173},{"text":"if it returns a positive number is talking to the parent","width":238},{"text":"and is telling the parent here is the id number for your child","width":333},{"text":"so let us make a note of that","width":162},{"text":"let us call this","width":75},{"text":"here is my child","width":63},{"text":"so i can call my child","width":149},{"text":"and then i can write an if statement to decide if i am the parent or the newly created child or not","width":466},{"text":"so we will say look if the child id what i return from fork is actually greater than 0","width":470},{"text":"then i am the parent","width":194},{"text":"so let's put something like hey i'm the grouchy parent","width":575},{"text":"if it is zero however then hey I'm the carefree child!","width":905},{"text":"so we will let's remove this ","width":254},{"text":"i'll get rid of that line now","width":83},{"text":"okay so now we have a little program where the parent and child are going to do two different things","width":381},{"text":"and in fact it is standard for the parent to wait for the child to finish","width":438},{"text":"we don't have to but quite often we need the child process to do something for us","width":436},{"text":"perhaps in the background","width":112},{"text":"but we don't actually want to continue until the child has finished","width":234},{"text":"so let us do that","width":88},{"text":"what i am going to wait for my child to finish","width":262},{"text":"so i am going to say waitpid and i need to say okay what is the id i need to wait on well here is the childid","width":566},{"text":"and later on i can ask for some status information about my child","width":345},{"text":"and for now the last argument i am just going to put as 0","width":189},{"text":"so i need to have a variable called status just a little integer","width":299},{"text":"and in fact we are going to pass not just the value of status but the address of our little variable","width":400},{"text":"and later on we can use that to find out say did our child exit normally or was it terminated in a surprising way","width":492},{"text":"so let us run this now and what we will expect to see is that we'll wait for the child to finish before we print","width":519},{"text":"I'm the grouchy parent","width":63},{"text":"so let's run this","width":393},{"text":"okay so this time the child process got to print out I'm the carefree child","width":442},{"text":"then it exited","width":119},{"text":"meanwhile the parent was waiting for the async condition and when that happened","width":342},{"text":"the parent is able to continue and is able to print I'm the grouchy parent","width":416},{"text":"so i want to finish on a common programming error that can really bring down a server","width":564},{"text":"and that is suppose we made many many many processes","width":406},{"text":"so it is one thing to create a few","width":142},{"text":"let's call say fork a couple of times and perhaps you can guess how many worlds we'll see here","width":971},{"text":"that's right we see four worlds","width":146},{"text":"and in fact the parent finished early so this is the hash of the terminal saying what would you like to do now","width":540},{"text":"but we had four processes all printing out world","width":212},{"text":"and if we had three forks now we have eight","width":311},{"text":"okay so let us make something now called a fork bomb which is where we keep creating lots and lots of processes","width":550},{"text":"and this often happens by accident by people who are new to systems programming","width":326},{"text":"but just for fun because i am just doing this inside a browser it doesn't matter if i bring my little virtual machine to a halt","width":582},{"text":"i can always just reload the page","width":114},{"text":"so let's print out my id","width":630},{"text":"i will put this in a little loop that says while one let's fork","width":327},{"text":"let's print out my process id","width":347},{"text":"and then i will sleep two seconds","width":460},{"text":"so initially i have two processes","width":111},{"text":"and then each of those processes calls fork","width":209},{"text":"so we got four","width":51},{"text":"and then each of those processes call fork","width":171},{"text":"prints it out and sleeps","width":93},{"text":"and so every two seconds i am doubling the number of processes that are in my system","width":291},{"text":"so that's a lot of processes","width":124},{"text":"and in fact pretty soon the kernel will run out of space","width":324},{"text":"it won't be able to keep track of any more processes","width":138},{"text":"and fork will stop working","width":220},{"text":"and now we see here's the kernel printing out all sorts of debug messages","width":248},{"text":"desperately trying to make the system stable again","width":190},{"text":"as it arbitrarily starts to kill processes in an attempt to recover some memory and space in its process tables","width":539},{"text":"so amazingly my little kernel here has managed to recover to the point to where i have a working system","width":500},{"text":"but that is fork bombs and you should avoid from accidentally doing this","width":346},{"text":"otherwise you will have a system administrator telling you that you cannot log onto that machine anymore","width":286},{"text":"okay have fun and i'll see you in the next video","width":194},{"text":"bye","width":39}],
];


videoCaptions.forEach(function (captions, i) {
  var result = "WEBVTT\n\n";
  var currentTime = 0;
  captions.forEach(function (caption) {
    var start = currentTime;
    var end = currentTime + (caption.width / 64) + (2/64);

    var timeRange = timeNumToString(start) + " --> " + timeNumToString(end);
    result += timeRange
    result += "\n"
    result += "<v Lawrence Angrave>" + caption.text
    result += "\n\n"

    currentTime = end;
  })
  console.log(result);
  fs.writeFileSync("video_" + i + ".webvtt", result);
})

/*
  Converts a time string to a time integer
*/
function timeStringToNum(timeString) {
  var minutes = parseInt(timeString.split(":")[0], 10);
  var seconds = parseInt(timeString.split(":")[1], 10);
  return 60 * minutes + seconds;
}

/*
  Converts a time integer to a time string
*/
function timeNumToString(timeNum) {
  var timeNumInMinutes = Math.floor(timeNum / 60);
  var timeNumInSeconds = Math.floor(timeNum % 60);

  var stringSeconds = (timeNum % 60) + "";

  var timeInMilliseconds = (stringSeconds.split(".")[1] || "");
  if (timeInMilliseconds.length < 3) {
    var loopNumber = 3 - timeInMilliseconds.length;
    for (var i = 0; i < loopNumber; i++) {
      timeInMilliseconds += "0";
    }
  } else if (timeInMilliseconds.length > 3) {
    timeInMilliseconds = timeInMilliseconds.substring(0, 3);
  }

  timeInMilliseconds = "." + timeInMilliseconds

  if (timeNumInMinutes < 10) {
    timeNumInMinutes = "0" + timeNumInMinutes;
  }

  if (timeNumInSeconds < 10) {
    return timeNumInMinutes + ":0" + timeNumInSeconds + timeInMilliseconds;
  }
  return timeNumInMinutes + ":" + timeNumInSeconds + timeInMilliseconds;
}